SCHEMA GUID_SCHEMA_20230516_01;

  TYPE uuid = STRING (36) FIXED;
  END_TYPE;

(*
[[uuid_attribute_select]]
A guid_attribute_select provides a selection of id_attribute or identification
assignment.
*)
  TYPE uuid_attribute_select = SELECT
    (id_attribute,
     identification_assignment);
  END_TYPE;

(*
[[uuid_relationship_role]]
A guid_relationship_role enumerates the permitted roles associated with a
guid_relationship.
*)
  TYPE uuid_relationship_role = ENUMERATION OF
    (SUPERSEDES,
     MERGE,
     SPLIT,
     DERIVE_FROM,
     SAME_AS,
     SIMILAR_TO);
  END_TYPE;

  ENTITY characterized_object;
  END_ENTITY;

  ENTITY general_property;
  END_ENTITY;

  ENTITY product;
  END_ENTITY;

(*
[[uuid_attribute]]
A guid_attribute associates a UUID with an ordered collection of product data
items.
*)
  ENTITY uuid_attribute
    ABSTRACT
    SUPERTYPE OF (ONEOF(v5_uuid_attribute, v4_uuid_attribute) ANDOR uuid_attribute_with_approximate_location);
      identifier      : uuid;
      identified_item : LIST [1:?] OF UNIQUE uuid_attribute_select;
    UNIQUE
      UR1 : identifier;
  END_ENTITY;

(*
[[v5_uuid_attribute]]
A v5_guid_attribute is a guid_attribute that provides a UUID that conforms to
version 5 of the relevant rfc. The name is not provided. The namespace may not
be provided.
*)
  ENTITY v5_uuid_attribute
    SUBTYPE OF(uuid_attribute);
  END_ENTITY;

(*
[[hash_based_v5_uuid_attribute]]
A hash_based_v5_guid_attribute is a v5_guid_attribute that provides a UUID that
is a hash of the data items specified in the identified_items list attribute in
the applied_guid_attribute.
*)
  ENTITY hash_based_v5_uuid_attribute
    SUBTYPE OF(v5_uuid_attribute);
      hash_function : STRING;
    WHERE
      WR1 : hash_function <> '';
  END_ENTITY;

(*
[[v4_uuid_attribute]]
A v4_guid_attribute is a guid_attribute that provides a UUID that conforms to
version 4 of the relevant rfc.
*)
  ENTITY v4_uuid_attribute
    SUBTYPE OF(uuid_attribute);
  END_ENTITY;

(*
[[uuid_attribute_with_approximate_location]]
A guid_attribute_with_approximate_location is a guid_attribute that provides an
approximate location in cartesian space of an item or items that has a UUID
assigned.
*)
  ENTITY uuid_attribute_with_approximate_location
    SUBTYPE OF(uuid_attribute);
      location_representation : shape_representation;
      approximate_location    : cartesian_point;
    WHERE
      WR1 : location_representation IN using_representations(approximate_location);
  END_ENTITY;

  ENTITY shape_representation;
  END_ENTITY;

  ENTITY cartesian_point;
  END_ENTITY;

  ENTITY id_attribute;
  END_ENTITY;

  ENTITY identification_assignment;
  END_ENTITY;

  ENTITY dimensional_location;
  END_ENTITY;

  ENTITY characterized_object_relationship;
  END_ENTITY;

  ENTITY datum_feature;
  END_ENTITY;

  ENTITY datum_system;
  END_ENTITY;

  ENTITY dimension_related_tolerance_zone_element;
  END_ENTITY;

  ENTITY dimensional_characteristic_representation;
  END_ENTITY;

  ENTITY dimensional_size;
  END_ENTITY;

  ENTITY general_property_relationship;
  END_ENTITY;

  ENTITY geometric_tolerance;
  END_ENTITY;

  ENTITY geometric_tolerance_auxiliary_classification;
  END_ENTITY;

  ENTITY gps_filter;
  END_ENTITY;

  ENTITY gps_filtration_specification;
  END_ENTITY;

  ENTITY limits_and_fits;
  END_ENTITY;

  ENTITY placed_datum_target_feature;
  END_ENTITY;

  ENTITY plus_minus_tolerance;
  END_ENTITY;

  ENTITY product_definition;
  END_ENTITY;

  ENTITY product_definition_formation;
  END_ENTITY;

  ENTITY product_definition_formation_relationship;
  END_ENTITY;

  ENTITY product_definition_relationship;
  END_ENTITY;

  ENTITY property_definition;
  END_ENTITY;

  ENTITY representation;
  END_ENTITY;

  ENTITY representation_item;
  END_ENTITY;

  ENTITY runout_zone_orientation;
  END_ENTITY;

  ENTITY topological_representation_item;
  END_ENTITY;

  ENTITY tolerance_with_statistical_distribution;
  END_ENTITY;

  ENTITY tolerance_value;
  END_ENTITY;

  ENTITY shape_aspect;
  END_ENTITY;

  ENTITY shape_aspect_relationship;
  END_ENTITY;

  ENTITY tolerance_zone_form;
  END_ENTITY;

  ENTITY tolerance_zone_definition;
  END_ENTITY;

(*
[[uuid_relationship]]
A guid_relationship relates two guids and provides a role for that relationship.
*)
  ENTITY uuid_relationship;
      identifier : uuid;
      uuid_2     : uuid;
      uuid_1     : uuid;
      role       : uuid_relationship_role;
    UNIQUE
      UR1 : identifier;
    WHERE
      IP1 : (* acyclic_guid_relationship(SELF, guid_1, guid_2) *) ;
  END_ENTITY;
(*
*Item Property Description Constraint*
[[IP1]]
-- A guid_relationship shall be acyclic.
*)

(*
[[uuid_provenance]]
A guid_provenance is the specification of a sequence of guid_relationships that
provides historical record of those relationshps. The sequence is a simple list
form.
*)
  ENTITY uuid_provenance;
      content    : LIST [1:?] OF UNIQUE uuid_relationship;
      identifier : uuid;
    UNIQUE
      UR1 : identifier;
  END_ENTITY;

(*
[[uuid_context_role]]
A guid_context_role associates a role to an guid.
*)
  ENTITY uuid_context_role;
      role       : STRING;
      identifier : uuid;
    UNIQUE
      UR1 : identifier;
    WHERE
      WR1 : role <> '';
  END_ENTITY;

(*
[[uuid_tree_node]]
Only leaf node specifies data content, which is proposed to be a
v5_uuid_attribute.
*)
  ENTITY uuid_tree_node
    ABSTRACT;
      uuid   : STRING (36) FIXED;
      node_2 : OPTIONAL uuid_tree_node;
      node_1 : OPTIONAL uuid_tree_node;
    WHERE
      WR1 : node_1 <> node_2;
  END_ENTITY;

(*
[[uuid_leaf_node]]
The inherited hash function for leaf nodes shall differ from that for internal
and root nodes.

reference: Tree Hash EXchange format (THEX)

In order to protect against collisions between leaf hashes and internal hashes,
different hash constructs are used to hash the leaf nodes and the internal
nodes. The same hash algorithm is used as the basis of each construct, but a
single '1' byte in network byte order, or 0x01 is prepended to the input of the
internal node hashes, and a single '0' byte, or 0x00 is prepended to the input
of the leaf node hashes.

Let H() be the secure hash algorithm, for example SHA-1.

internal hash function = IH(X) = H(0x01, X)

leaf hash function = LH(X) = H(0x00, X)
*)
  ENTITY uuid_leaf_node
    SUBTYPE OF(uuid_tree_node);
      data         : v5_uuid_attribute;
    DERIVE
      leaf_operand : STRING (1) FIXED := '0';
    WHERE
      WR1 : NOT (EXISTS (node_1) OR EXISTS(node_2));
      WR2 : (SIZEOF(USED_IN(UUID_SCHEMA.UUID.TREE_NODE.NODE_1))=1) XOR (SIZEOF(USED_IN(UUID_SCHEMA.UUID.TREE_NODE.NODE_2)) = 1);;
  END_ENTITY;

(*
[[uuid_internal_node]]
The inherited hash function for leaf nodes shall differ from that for internal
and root nodes.

reference: Tree Hash EXchange format (THEX)

In order to protect against collisions between leaf hashes and internal hashes,
different hash constructs are used to hash the leaf nodes and the internal
nodes. The same hash algorithm is used as the basis of each construct, but a
single '1' byte in network byte order, or 0x01 is prepended to the input of the
internal node hashes, and a single '0' byte, or 0x00 is prepended to the input
of the leaf node hashes.

Let H() be the secure hash algorithm, for example SHA-1.

internal hash function = IH(X) = H(0x01, X)

leaf hash function = LH(X) = H(0x00, X)
*)
  ENTITY uuid_internal_node
    SUBTYPE OF(uuid_tree_node);
    DERIVE
      internal_operand : STRING (1) FIXED := '1';
    WHERE
      WR1 : EXISTS(node_1) AND EXISTS(node_2);
      WR2 : ('UUID_SCHEMA.UUID.TREE_ROOT_NODE' IN TYPEOF(SELF)) OR (SIZEOF(USED_IN(UUID_SCHEMA.UUID.TREE_NODE.NODE_1))=1) XOR (SIZEOF(USED_IN(UUID_SCHEMA.UUID.TREE_NODE.NODE_2)) = 1);;
  END_ENTITY;

(*
[[uuid_root_node]]
The root node hash shall be different from the leaf node hash.
reference: Tree Hash EXchange format (THEX)
In order to protect against collisions between leaf hashes and internal hashes,
different hash constructs are used to hash the leaf nodes and the internal
nodes. The same hash algorithm is used as the basis of each construct, but a
single '1' byte in network byte order, or 0x01 is prepended to the input of the
internal node hashes, and a single '0' byte, or 0x00 is prepended to the input
of the leaf node hashes.

Let H() be the secure hash algorithm, for example SHA-1.

internal hash function = IH(X) = H(0x01, X)

leaf hash function = LH(X) = H(0x00, X)
*)
  ENTITY uuid_root_node
    SUBTYPE OF(uuid_internal_node);
      hash_function : STRING;
    WHERE
      WR1 : SIZEOF(USED_IN(UUID_SCHEMA.UUID.TREE_NODE.NODE_1)) = 0;;
      WR2 : SIZEOF(USED_IN(UUID_SCHEMA.UUID.TREE_NODE.NODE_2)) = 0;;
  END_ENTITY;
(*
*Attribute definitions*
[[hash_function]]
temporarily typing hash function as a string. Need to specialize as a urn.
*Item Property Description Constraint*
[[WR1]]
There shall be no owner for a root node.
*)

END_SCHEMA;