ISO-10303-21;
HEADER;

/******************************************************************************************
* STEP Physical File produced by: The EXPRESS Data Manager Version 5.94.203 RC1 : 12 Aug 2022
* Module:                         EDMstepFileFactory/EDMstandAlone
* Creation date:                  Mon Apr 24 21:21:25 2023
* Host:                           WIN-RQDBUSR1IPU
* Database:                       C:\edms\edmdb\db_2022_08_17_00
* Database version:               5207
* Database creation date:         Wed Aug 17 10:34:33 2022
* Schema:                         EXPRESS_G
* Model:                          EDMvisualExpress.TEMP_MODEL_1
* Model creation date:            Mon Apr 24 21:21:25 2023
* Header model:                   
* EDMuser:                        sdai-user
* EDMgroup:                       sdai-group
* License ID and type:            10542 : Project license. Expiry date: 10 Aug 2032
* EDMstepFileFactory options:     00
******************************************************************************************/

FILE_DESCRIPTION((''),'2;1');
FILE_NAME('C:\\edms\\edmdb\\db_2022_08_17_00.EDMvisualExpress.TEMP_MODEL_1',
          '2023-04-24T21:21:25',
          ('ANONYMOUS USER'),
          ('ANONYMOUS ORGANISATION'),
          'The EXPRESS Data Manager Version 5.94.203 RC1 : 12 Aug 2022',
          '',
          '');
FILE_SCHEMA(('EXPRESS_G'));
ENDSEC;

DATA;
#1= SCHEMATA(268435584,'MERKLE_TREE',$,78,$,$,0,#2,0.375,0.,0.,(#320,
#330,#346,#399,#517,#412,#486,#502,#388,#366,#427,#555),$,$,$,2,(),$,2,
'','');
#2= SETTINGS(0,16577284,16577280,#3,$,#5,#15,#24,#34,#44,#54,#64,#74,#84
,#93,#102,#111,#120,#129,#138,#140,10.,10.,#153,#154,#6,#317,#143);
#3= BACKGROUND_SET(#4,1);
#4= COLOR(255,255,255);
#5= SELECTION_SET(7);
#6= RECT_SET(#7,#9,#11,128,#12,#14);
#7= LINE_SET(#8,3.,0);
#8= COLOR(0,0,0);
#9= TEXT_SET(1,40,40.,'Times New Roman',#10);
#10= COLOR(0,0,0);
#11= VLINE(0,0.);
#12= BACKGROUND_SET(#13,1);
#13= COLOR(255,255,255);
#14= WORLD_POINT(250.,100.);
#15= RECT_SET(#16,#18,#20,128,#21,#23);
#16= LINE_SET(#17,3.,0);
#17= COLOR(0,0,0);
#18= TEXT_SET(1,6,40.,'Times New Roman',#19);
#19= COLOR(0,0,0);
#20= VLINE(0,0.);
#21= BACKGROUND_SET(#22,1);
#22= COLOR(255,255,255);
#23= WORLD_POINT(250.,100.);
#24= PLINE_SET(#25,#27,#29);
#25= LINE_SET(#26,10.,0);
#26= COLOR(0,0,0);
#27= TEXT_SET(1,6,40.,'Times New Roman',#28);
#28= COLOR(0,0,0);
#29= CIRCLE_SET(#30,#32,12.,0);
#30= LINE_SET(#31,3.,0);
#31= COLOR(0,0,0);
#32= BACKGROUND_SET(#33,0);
#33= COLOR(255,255,255);
#34= PLINE_SET(#35,#37,#39);
#35= LINE_SET(#36,3.,0);
#36= COLOR(0,0,0);
#37= TEXT_SET(1,66,30.,'Arial',#38);
#38= COLOR(0,0,0);
#39= CIRCLE_SET(#40,#42,12.,0);
#40= LINE_SET(#41,3.,0);
#41= COLOR(0,0,0);
#42= BACKGROUND_SET(#43,0);
#43= COLOR(255,255,255);
#44= PLINE_SET(#45,#47,#49);
#45= LINE_SET(#46,3.,4);
#46= COLOR(0,0,0);
#47= TEXT_SET(1,40,30.,'Times new roman',#48);
#48= COLOR(0,0,0);
#49= CIRCLE_SET(#50,#52,12.,0);
#50= LINE_SET(#51,3.,0);
#51= COLOR(0,0,0);
#52= BACKGROUND_SET(#53,0);
#53= COLOR(255,255,255);
#54= PLINE_SET(#55,#57,#59);
#55= LINE_SET(#56,3.,0);
#56= COLOR(0,0,0);
#57= TEXT_SET(1,66,30.,'Arial',#58);
#58= COLOR(0,0,0);
#59= CIRCLE_SET(#60,#62,12.,0);
#60= LINE_SET(#61,3.,0);
#61= COLOR(0,0,0);
#62= BACKGROUND_SET(#63,0);
#63= COLOR(255,255,255);
#64= PLINE_SET(#65,#67,#69);
#65= LINE_SET(#66,3.,0);
#66= COLOR(0,0,0);
#67= TEXT_SET(1,40,30.,'Times new roman',#68);
#68= COLOR(0,0,0);
#69= CIRCLE_SET(#70,#72,12.,0);
#70= LINE_SET(#71,3.,0);
#71= COLOR(0,0,0);
#72= BACKGROUND_SET(#73,0);
#73= COLOR(255,255,255);
#74= PLINE_SET(#75,#77,#79);
#75= LINE_SET(#76,6.,0);
#76= COLOR(0,0,255);
#77= TEXT_SET(1,40,30.,'Times new roman',#78);
#78= COLOR(0,0,0);
#79= CIRCLE_SET(#80,#82,12.,0);
#80= LINE_SET(#81,3.,0);
#81= COLOR(0,0,255);
#82= BACKGROUND_SET(#83,0);
#83= COLOR(255,255,255);
#84= RECT_SET(#85,#87,#89,128,#90,#92);
#85= LINE_SET(#86,3.,4);
#86= COLOR(0,0,0);
#87= TEXT_SET(1,6,30.,'Times New Roman',#88);
#88= COLOR(0,0,0);
#89= VLINE(0,0.);
#90= BACKGROUND_SET(#91,1);
#91= COLOR(255,255,255);
#92= WORLD_POINT(150.,50.);
#93= RECT_SET(#94,#96,#98,128,#99,#101);
#94= LINE_SET(#95,3.,4);
#95= COLOR(0,0,0);
#96= TEXT_SET(1,6,30.,'Times New Roman',#97);
#97= COLOR(0,0,0);
#98= VLINE(1,20.);
#99= BACKGROUND_SET(#100,1);
#100= COLOR(255,255,255);
#101= WORLD_POINT(150.,50.);
#102= RECT_SET(#103,#105,#107,128,#108,#110);
#103= LINE_SET(#104,3.,4);
#104= COLOR(0,0,0);
#105= TEXT_SET(1,6,30.,'Times New Roman',#106);
#106= COLOR(0,0,0);
#107= VLINE(2,20.);
#108= BACKGROUND_SET(#109,1);
#109= COLOR(255,255,255);
#110= WORLD_POINT(150.,50.);
#111= RECT_SET(#112,#114,#116,128,#117,#119);
#112= LINE_SET(#113,3.,0);
#113= COLOR(0,0,0);
#114= TEXT_SET(1,6,30.,'Times New Roman',#115);
#115= COLOR(0,0,0);
#116= VLINE(2,20.);
#117= BACKGROUND_SET(#118,1);
#118= COLOR(255,255,255);
#119= WORLD_POINT(150.,50.);
#120= RECT_SET(#121,#123,#125,256,#126,#128);
#121= LINE_SET(#122,3.,0);
#122= COLOR(0,0,0);
#123= TEXT_SET(1,6,30.,'Times New Roman',#124);
#124= COLOR(0,0,0);
#125= VLINE(0,30.);
#126= BACKGROUND_SET(#127,1);
#127= COLOR(255,255,255);
#128= WORLD_POINT(200.,100.);
#129= RECT_SET(#130,#132,#134,256,#135,#137);
#130= LINE_SET(#131,3.,0);
#131= COLOR(0,0,0);
#132= TEXT_SET(1,6,30.,'Times New Roman',#133);
#133= COLOR(0,0,0);
#134= VLINE(0,30.);
#135= BACKGROUND_SET(#136,1);
#136= COLOR(255,255,255);
#137= WORLD_POINT(200.,100.);
#138= VISIBLE_SET(());
#140= PAGE_SET(#141,250.,250.,250.,250.,50.,50.,1600.,2370.,1,1,2159.,
2794.,0,0);
#141= LINE_SET(#142,15.,0);
#142= COLOR(0,128,128);
#143= PLINE_SET(#144,#146,#148);
#144= LINE_SET(#145,10.,0);
#145= COLOR(0,0,0);
#146= TEXT_SET(0,0,0.,'',#147);
#147= COLOR(0,0,0);
#148= CIRCLE_SET(#149,#151,12.,0);
#149= LINE_SET(#150,3.,0);
#150= COLOR(0,0,0);
#151= BACKGROUND_SET(#152,0);
#152= COLOR(255,255,255);
#153= SAVE_SET(1,600,1,10);
#154= REPORT_SET(1.,63,(0,4,0,1,3,2,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,6,7,8,0,0,0,0),(#157,#159,#161,#163,#165,#167,#169,#171,#173,
#175,#177,#179,#181,#183,#185,#187,#189,#191,#193,#195,#197,#199,#201,
#203,#205,#207,#209),'$LICENSE_TO - $DATE',
'Figure D.$PAGE_NR  - $SCHEMA_NAME  EXPRESS-G diagram $PAGE_NR  of $LAST_PAGE_NR'
,('EXPRESS specification:','EXPRESS specification:',
'EXPRESS specification:','EXPRESS specification:',
'EXPRESS specification:','EXPRESS specification:',
'EXPRESS specification:','EXPRESS specification:',
'EXPRESS specification:','Attribute definitions:','Formal Propositions:'
,'EXPRESS specification:','EXPRESS specification:'),#212);
#157= STYLE_SET('Express_g Header','Times New Roman',4.,0,0,256,0.,0.,0.
,0.,());
#159= STYLE_SET('Express_g Footer','Times New Roman',4.,0,0,256,0.,0.,0.
,0.,());
#161= STYLE_SET('Heading 1','Times New Roman',6.,0,0,264,0.,0.,4.,4.,()
);
#163= STYLE_SET('Heading 2','Times New Roman',6.,0,0,256,0.,0.,4.,4.,()
);
#165= STYLE_SET('Annex','Times New Roman',6.,0,0,256,0.,0.,4.,4.,());
#167= STYLE_SET('Item Description','Times New Roman',4.,0,0,0,0.,0.,0.,
0.,());
#169= STYLE_SET('Item Property Description','Times New Roman',4.,0,0,0,
60.,-55.,4.,0.,(57.5));
#171= STYLE_SET('Item Property Description Constraint','Times New Roman'
,4.,0,0,0,40.,-35.,4.,0.,());
#173= STYLE_SET('Item Specification','Times New Roman',4.,0,0,512,0.,0.,
2.,2.,());
#175= STYLE_SET('Definition','Courier New',3.8,0,0,0,0.,0.,0.,0.,());
#177= STYLE_SET('Item Definition','Courier New',3.8,0,0,0,10.,-5.,0.,0.,
());
#179= STYLE_SET('Item Definition Heading','Courier New',3.8,0,0,0,50.,
-40.,0.,0.,());
#181= STYLE_SET('Item Definition Scope','Courier New',3.8,0,0,0,5.,0.,0.
,0.,());
#183= STYLE_SET('Item Expression','Courier New',3.8,0,0,0,10.,0.,0.,0.,(
));
#185= STYLE_SET('Item Content','Courier New',3.8,0,0,0,72.5,-62.5,0.,0.,
(70.));
#187= STYLE_SET('Item Content Constraint','Courier New',3.8,0,0,0,32.5,
-22.5,0.,0.,(30.));
#189= STYLE_SET('Heading 2','Times New Roman',6.,0,0,256,0.,0.,4.,4.,()
);
#191= STYLE_SET('User Style 1','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#193= STYLE_SET('User Style 2','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#195= STYLE_SET('User Style 3','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#197= STYLE_SET('User Style 4','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#199= STYLE_SET('User Style 5','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#201= STYLE_SET('User Style 6','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#203= STYLE_SET('User Style 7','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#205= STYLE_SET('User Style 8','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#207= STYLE_SET('User Style 9','Times New Roman',4.,0,0,0,0.,0.,0.,0.,()
);
#209= STYLE_SET('User Style 10','Times New Roman',4.,0,0,0,0.,0.,0.,0.,(
));
#212= REPORT_HTML('none',(#214,#216,#218,#220,#222,#224,#226,#228,#230,
#232,#234,#236),(#239,#243),#247,#248,#250,$);
#214= FONT_HTML('Times New Roman',4,#215);
#215= OUTLOOK_HTML(1,0);
#216= FONT_HTML('Arial',3,#217);
#217= OUTLOOK_HTML(8,255);
#218= FONT_HTML('Times New Roman',5,#219);
#219= OUTLOOK_HTML(1,0);
#220= FONT_HTML('Times New Roman',5,#221);
#221= OUTLOOK_HTML(1,0);
#222= FONT_HTML('Times New Roman',3,#223);
#223= OUTLOOK_HTML(0,0);
#224= FONT_HTML('Times New Roman',3,#225);
#225= OUTLOOK_HTML(4,0);
#226= FONT_HTML('Courier New',3,#227);
#227= OUTLOOK_HTML(0,0);
#228= FONT_HTML('Times New Roman',4,#229);
#229= OUTLOOK_HTML(1,0);
#230= FONT_HTML('Times New Roman',3,#231);
#231= OUTLOOK_HTML(1,0);
#232= FONT_HTML('Times New Roman',3,#233);
#233= OUTLOOK_HTML(0,0);
#234= FONT_HTML('Times New Roman',4,#235);
#235= OUTLOOK_HTML(1,0);
#236= FONT_HTML('Times New Roman',4,#237);
#237= OUTLOOK_HTML(1,0);
#239= DESCRIPTION_CONTENT_HTML(#240,#242,30);
#240= FONT_HTML('Times New Roman',3,#241);
#241= OUTLOOK_HTML(0,0);
#242= OUTLOOK_HTML(1,0);
#243= DESCRIPTION_CONTENT_HTML(#244,#246,20);
#244= FONT_HTML('Times New Roman',3,#245);
#245= OUTLOOK_HTML(0,0);
#246= OUTLOOK_HTML(1,0);
#247= BACKGROUND_HTML(0,'.\\visualExpress\\html\\img\\background.gif',
16777215);
#248= EXPRESS_HTML(63,#249,100,2,2,2,30,20);
#249= OUTLOOK_HTML(1,0);
#250= DIAGRAM_HTML(7,3,50,1,1,0,600);
#251= NAVBAR_HTML('home-navbar',
'.\\visualExpress\\html\\img\\home_navbar.gif',500,24,(#253,#254,#255,
#256));
#253= IMAGE_MAP_HTML('$HOME',0,0,89,23);
#254= IMAGE_MAP_HTML('$SCHEMA',90,0,199,23);
#255= IMAGE_MAP_HTML('$EXPRESS-G',200,0,349,23);
#256= IMAGE_MAP_HTML('$REFERENCES',350,0,499,23);
#257= NAVBAR_HTML('schema-navbar',
'.\\visualExpress\\html\\img\\schema_navbar_e2.gif',629,46,(#259,#260,
#261,#262,#263,#264,#265,#266,#267,#268,#269));
#259= IMAGE_MAP_HTML('$HOME',0,0,63,22);
#260= IMAGE_MAP_HTML('$SCHEMA INTERFACES',64,0,197,22);
#261= IMAGE_MAP_HTML('$CONSTANTS',198,0,287,22);
#262= IMAGE_MAP_HTML('$ENTITIES',288,0,356,22);
#263= IMAGE_MAP_HTML('$DEFINED TYPES',357,0,475,22);
#264= IMAGE_MAP_HTML('$SELECT TYPES',0,23,70,44);
#265= IMAGE_MAP_HTML('$ENUMERATIONS TYPES',71,23,171,44);
#266= IMAGE_MAP_HTML('$RULES',172,23,231,44);
#267= IMAGE_MAP_HTML('$FUNCTIONS',232,23,315,44);
#268= IMAGE_MAP_HTML('$PROCEDURES',316,23,475,44);
#269= IMAGE_MAP_HTML('$SUBTYPE CONSTRAINTS',476,0,628,22);
#270= NAVBAR_HTML('entity-navbar',
'.\\visualExpress\\html\\img\\entity_navbar.gif',625,24,(#272,#273,#274,
#275,#276,#277,#278,#279));
#272= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#273= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#274= IMAGE_MAP_HTML('$DIAGRAM',142,0,244,23);
#275= IMAGE_MAP_HTML('$DEFINITION',245,0,323,23);
#276= IMAGE_MAP_HTML('$ATTRIBUTE DESCRIPTION',324,0,398,23);
#277= IMAGE_MAP_HTML('$CONSTRAINT DESCRIPTION',399,0,442,23);
#278= IMAGE_MAP_HTML('$INHERITANCE',443,0,526,23);
#279= IMAGE_MAP_HTML('$REFERENCES',527,0,623,23);
#280= NAVBAR_HTML('type-navbar',
'.\\visualExpress\\html\\img\\type_navbar.gif',466,24,(#282,#283,#284,
#285,#286,#287));
#282= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#283= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#284= IMAGE_MAP_HTML('$DIAGRAM',142,0,244,23);
#285= IMAGE_MAP_HTML('$DEFINITION',245,0,323,23);
#286= IMAGE_MAP_HTML('$CONSTRAINT DESCRIPTION',324,0,367,23);
#287= IMAGE_MAP_HTML('$REFERENCES',368,0,464,23);
#288= NAVBAR_HTML('rule-navbar',
'.\\visualExpress\\html\\img\\rule_navbar.gif',363,24,(#290,#291,#292,
#293,#294));
#290= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#291= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#292= IMAGE_MAP_HTML('$DEFINITION',142,0,220,23);
#293= IMAGE_MAP_HTML('$CONSTRAINT DESCRIPTION',221,0,264,23);
#294= IMAGE_MAP_HTML('$REFERENCES',265,0,361,23);
#295= NAVBAR_HTML('expression-navbar',
'.\\visualExpress\\html\\img\\expression_navbar.gif',319,24,(#297,#298,
#299,#300));
#297= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#298= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#299= IMAGE_MAP_HTML('$DEFINITION',142,0,221,23);
#300= IMAGE_MAP_HTML('$REFERENCES',222,0,318,23);
#301= NAVBAR_HTML('Diagram-Navbar',
'.\\visualExpress\\html\\img\\diagram_navbar.gif',224,24,(#303,#304,#305
));
#303= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#304= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#305= IMAGE_MAP_HTML('$DIAGRAM OVERVIEW',142,0,222,23);
#306= NAVBAR_HTML('Diagram-Overview-Navbar',
'.\\visualExpress\\html\\img\\diagram_overview_navbar.gif',143,24,(#308,
#309));
#308= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#309= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#310= NAVBAR_HTML('Subtype-Constraint-Navbar',
'.\\visualExpress\\html\\img\\subtype_constraint_navbar.gif',422,24,(
#312,#313,#314,#315,#316));
#312= IMAGE_MAP_HTML('$HOME',0,0,62,23);
#313= IMAGE_MAP_HTML('$SCHEMA',63,0,141,23);
#314= IMAGE_MAP_HTML('$DIAGRAM',142,0,244,23);
#315= IMAGE_MAP_HTML('$DEFINITION',245,0,323,23);
#316= IMAGE_MAP_HTML('$REFERENCES',324,0,420,23);
#317= EXPRESS_SET(256);
#320= ENTITIES(1,197,$,$,#324,(),(#329,#387),(#448,#469,#479,#497,#453),
$,(#514),0,#515,#322,#321);
#321= INTERFACE_TO($,$);
#322= COMMENT(0,33,$,$,#323,$);
#323= TEXT(22,33,$,$,
'Only leaf node specifies data content, which is proposed to be a v5_uuid_attribute.'
,$,$);
#324= TEXT(22,5,$,$,'uuid_tree_node','(AE)\X\0D\X\0A*uuid_tree_node',
#325);
#325= TEXT_LAYOUT(285.,112.66667,264.,92.,#326);
#326= TEXT_TYPE(1,6);
#329= SUBTYPE_DEF(13,5,$,$,#330,#382);
#330= ENTITIES(1,229,$,$,#334,(#338),(),(#341,#361),$,(#378,#379),0,#380
,#332,#331);
#331= INTERFACE_TO($,$);
#332= COMMENT(0,33,$,$,#333,$);
#333= TEXT(22,33,$,$,
'The inherited hash function for leaf nodes shall differ from that for internal and root nodes.\X\0D\X\0A\X\0D\X\0Areference: Tree Hash EXchange format (THEX)\X\0D\X\0A\X\0D\X\0AIn order to protect against collisions between leaf hashes and internal hashes, different hash constructs are used to hash the leaf nodes and the internal nodes. The same hash algorithm is used as the basis of each construct, but a single ''1'' byte in network byte order, or 0x01 is prepended to the input of the internal node hashes, and a single ''0'' byte, or 0x00 is prepended to the input of the leaf node hashes.\X\0D\X\0A\X\0D\X\0ALet H() be the secure hash algorithm, for example SHA-1.\X\0D\X\0A\X\0D\X\0Ainternal hash function = IH(X) = H(0x01, X)\X\0D\X\0A\X\0D\X\0Aleaf hash function = LH(X) = H(0x00, X)'
,$,$);
#334= TEXT(22,5,$,$,'uuid_leaf_node','*uuid_leaf_node',#335);
#335= TEXT_LAYOUT(155.66667,55.333333,264.,46.,#336);
#336= TEXT_TYPE(1,6);
#338= SUPERTYPE_DEF(11,1,$,$,#320);
#341= ATTRIBUTE_DEF(12,5,$,$,#342,$,$,0,$,(),$,#346,#356,$,$,$);
#342= TEXT(22,5,$,$,'data','data ',#343);
#343= TEXT_LAYOUT(-53.333333,21.333333,65.,35.,#344);
#344= TEXT_TYPE(1,66);
#346= ENTITIES(1,229,$,$,#348,(),(),(),$,$,0,#354,$,#347);
#347= INTERFACE_TO($,$);
#348= TEXT(22,5,$,$,'v5_uuid_attribute','v5_uuid_attribute',#349);
#349= TEXT_LAYOUT(167.66667,55.333333,282.,46.,#350);
#350= TEXT_TYPE(1,6);
#354= TYPE_LAYOUT(#355);
#355= RECTANGLE(381.33333,1128.,335.33333,110.66667);
#356= OBJECT_LINE_LAYOUT(#357,#358);
#357= TEXT_PLACEMENT(0,1);
#358= WORLD_PLINE(#359,1,$,(108.),-1.,0.);
#359= WORLD_POINT(489.,1020.);
#361= ATTRIBUTE_DEF(12,5,$,$,#362,$,'''0''',0,$,(),$,#366,#372,$,$,$);
#362= TEXT(22,5,$,$,'leaf_operand','(DER) leaf_operand ',#363);
#363= TEXT_LAYOUT(-12.866778,88.,273.,35.,#364);
#364= TEXT_TYPE(1,66);
#366= PRIMITIVE_TYPE(2,197,$,$,#367,4,#370,-1);
#367= TEXT(22,5,$,$,'STRING','*STRING',#368);
#368= TEXT_LAYOUT(84.5,27.,124.,34.,#369);
#369= TEXT_TYPE(1,6);
#370= TYPE_LAYOUT(#371);
#371= RECTANGLE(66.666667,773.33333,169.,54.);
#372= OBJECT_LINE_LAYOUT(#373,#374);
#373= TEXT_PLACEMENT(1,2);
#374= WORLD_PLINE(#375,1,$,(-109.,-160.93311),-1.,0.);
#375= WORLD_POINT(396.59978,909.33333);
#378= WHERE_RULE('WR1','NOT (EXISTS (node_1) OR EXISTS(node_2))',$);
#379= WHERE_RULE('WR2','SIZEOF(owner) = 1',$);
#380= TYPE_LAYOUT(#381);
#381= RECTANGLE(333.33333,909.33333,311.33333,110.66667);
#382= OBJECT_LINE_LAYOUT(#383,#384);
#383= TEXT_PLACEMENT(0,0);
#384= WORLD_PLINE(#385,1,$,(80.666667,-222.66667,80.666667),-1.,0.);
#385= WORLD_POINT(711.66667,748.);
#387= SUBTYPE_DEF(13,5,$,$,#388,#442);
#388= ENTITIES(1,229,$,$,#392,(#396),(#398),(#422),$,(#439),0,#440,#390,
#389);
#389= INTERFACE_TO($,$);
#390= COMMENT(0,33,$,$,#391,$);
#391= TEXT(22,33,$,$,
'The inherited hash function for leaf nodes shall differ from that for internal and root nodes.\X\0D\X\0A\X\0D\X\0Areference: Tree Hash EXchange format (THEX)\X\0D\X\0A\X\0D\X\0AIn order to protect against collisions between leaf hashes and internal hashes, different hash constructs are used to hash the leaf nodes and the internal nodes. The same hash algorithm is used as the basis of each construct, but a single ''1'' byte in network byte order, or 0x01 is prepended to the input of the internal node hashes, and a single ''0'' byte, or 0x00 is prepended to the input of the leaf node hashes.\X\0D\X\0A\X\0D\X\0ALet H() be the secure hash algorithm, for example SHA-1.\X\0D\X\0A\X\0D\X\0Ainternal hash function = IH(X) = H(0x01, X)\X\0D\X\0A\X\0D\X\0Aleaf hash function = LH(X) = H(0x00, X)'
,$,$);
#392= TEXT(22,5,$,$,'uuid_internal_node','*uuid_internal_\X\0D\X\0Anode'
,#393);
#393= TEXT_LAYOUT(163.66667,55.333333,251.,92.,#394);
#394= TEXT_TYPE(1,6);
#396= SUPERTYPE_DEF(11,1,$,$,#320);
#398= SUBTYPE_DEF(13,5,$,$,#399,#416);
#399= ENTITIES(1,229,$,$,#403,(#407),(),(),$,(#411),0,#414,#401,#400);
#400= INTERFACE_TO($,$);
#401= COMMENT(0,33,$,$,#402,$);
#402= TEXT(22,33,$,$,
'The root node hash shall be different from the leaf node hash.\X\0D\X\0Areference: Tree Hash EXchange format (THEX)\X\0D\X\0AIn order to protect against collisions between leaf hashes and internal hashes, different hash constructs are used to hash the leaf nodes and the internal nodes. The same hash algorithm is used as the basis of each construct, but a single ''1'' byte in network byte order, or 0x01 is prepended to the input of the internal node hashes, and a single ''0'' byte, or 0x00 is prepended to the input of the leaf node hashes.\X\0D\X\0A\X\0D\X\0ALet H() be the secure hash algorithm, for example SHA-1.\X\0D\X\0A\X\0D\X\0Ainternal hash function = IH(X) = H(0x01, X)\X\0D\X\0A\X\0D\X\0Aleaf hash function = LH(X) = H(0x00, X)'
,$,$);
#403= TEXT(22,5,$,$,'uuid_root_node','*uuid_root_node',#404);
#404= TEXT_LAYOUT(161.,55.333333,268.,46.,#405);
#405= TEXT_TYPE(1,6);
#407= SUPERTYPE_DEF(11,1,$,$,#388);
#411= WHERE_RULE('WR1','SIZEOF(owner) = 0',#412);
#412= COMMENT(0,33,$,$,#413,$);
#413= TEXT(22,33,$,$,'There shall be no owner for a root node.',$,$);
#414= TYPE_LAYOUT(#415);
#415= RECTANGLE(805.33333,1114.6667,322.,110.66667);
#416= OBJECT_LINE_LAYOUT(#417,#418);
#417= TEXT_PLACEMENT(0,0);
#418= WORLD_PLINE(#419,1,$,(48.666667,3.4106051E-13,48.666667),-1.,0.);
#419= WORLD_POINT(966.33333,1017.3333);
#422= ATTRIBUTE_DEF(12,5,$,$,#423,$,'''1''',0,$,(),$,#427,#433,$,$,$);
#423= TEXT(22,5,$,$,'internal_operand','(DER) internal_operand ',#424);
#424= TEXT_LAYOUT(145.16667,96.,324.,35.,#425);
#425= TEXT_TYPE(1,66);
#427= PRIMITIVE_TYPE(2,197,$,$,#428,4,#431,-1);
#428= TEXT(22,5,$,$,'STRING','*STRING',#429);
#429= TEXT_LAYOUT(81.666667,27.,124.,34.,#430);
#430= TEXT_TYPE(1,6);
#431= TYPE_LAYOUT(#432);
#432= RECTANGLE(1202.6667,786.66667,163.33333,54.);
#433= OBJECT_LINE_LAYOUT(#434,#435);
#434= TEXT_PLACEMENT(2,2);
#435= WORLD_PLINE(#436,0,$,(36.333333,-148.33333,36.333333),-1.,0.);
#436= WORLD_POINT(1130.,962.);
#439= WHERE_RULE('WR1','EXISTS (node_1) AND EXISTS(node_2)',$);
#440= TYPE_LAYOUT(#441);
#441= RECTANGLE(802.66667,906.66667,327.33333,110.66667);
#442= OBJECT_LINE_LAYOUT(#443,#444);
#443= TEXT_PLACEMENT(0,0);
#444= WORLD_PLINE(#445,1,$,(79.333333,254.66667,79.333333),-1.,0.);
#445= WORLD_POINT(711.66667,748.);
#448= ATTRIBUTE_DEF(12,5,$,$,#449,$,$,0,$,(#453),$,#320,#464,$,$,$);
#449= TEXT(22,5,$,$,'node_1','node_1 ',#450);
#450= TEXT_LAYOUT(0.,0.,108.,35.,#451);
#451= TEXT_TYPE(1,66);
#453= ATTRIBUTE_DEF(12,2097157,$,$,#454,#457,$,8,#448,(),$,#320,#459,$,$
,$);
#454= TEXT(22,5,$,$,'owner','(INV) owner  S[0:?] ',#455);
#455= TEXT_LAYOUT(0.,35.,258.,35.,#456);
#456= TEXT_TYPE(1,66);
#457= AGGREGATES($,2,'0','0',0);
#459= OBJECT_LINE_LAYOUT(#460,#461);
#460= TEXT_PLACEMENT(2,1);
#461= WORLD_PLINE(#462,0,$,(299.33333,-73.085694,-352.33333,62.570139),
-1.,0.);
#462= WORLD_POINT(812.66667,533.18222);
#464= OBJECT_LINE_LAYOUT(#465,#466);
#465= TEXT_PLACEMENT(2,1);
#466= WORLD_PLINE(#467,0,$,(299.33333,-73.085694,-352.33333,62.570139),
-1.,0.);
#467= WORLD_POINT(812.66667,533.18222);
#469= ATTRIBUTE_DEF(12,5,$,$,#470,$,$,0,$,(),$,#320,#474,$,$,$);
#470= TEXT(22,5,$,$,'node_2','node_2 ',#471);
#471= TEXT_LAYOUT(0.,0.,108.,35.,#472);
#472= TEXT_TYPE(1,66);
#474= OBJECT_LINE_LAYOUT(#475,#476);
#475= TEXT_PLACEMENT(3,1);
#476= WORLD_PLINE(#477,1,$,(-240.66667,451.49837,87.333333,-291.49837,
153.33333),-1.,0.);
#477= WORLD_POINT(527.66667,522.66667);
#479= ATTRIBUTE_DEF(12,5,$,$,#482,$,$,0,$,(),$,#486,#492,#480,$,$);
#480= COMMENT(0,33,$,$,#481,$);
#481= TEXT(22,33,$,$,
'temporarily typing hash function as a string. Need to specialize as a urn.'
,$,$);
#482= TEXT(22,5,$,$,'hash_function','hash_function ',#483);
#483= TEXT_LAYOUT(68.590165,-18.833333,195.,35.,#484);
#484= TEXT_TYPE(1,66);
#486= PRIMITIVE_TYPE(2,133,$,$,#487,4,#490,0);
#487= TEXT(22,5,$,$,'STRING','STRING',#488);
#488= TEXT_LAYOUT(75.,27.,109.,34.,#489);
#489= TEXT_TYPE(1,6);
#490= TYPE_LAYOUT(#491);
#491= RECTANGLE(1250.6667,184.,150.,54.);
#492= OBJECT_LINE_LAYOUT(#493,#494);
#493= TEXT_PLACEMENT(0,1);
#494= WORLD_PLINE(#495,0,$,(507.51366,-397.33333),-1.,0.);
#495= WORLD_POINT(812.66667,635.33333);
#497= ATTRIBUTE_DEF(12,5,$,$,#498,$,$,0,$,(),$,#502,#508,$,$,$);
#498= TEXT(22,5,$,$,'uuid','uuid ',#499);
#499= TEXT_LAYOUT(-53.,-10.572444,66.,35.,#500);
#500= TEXT_TYPE(1,66);
#502= PRIMITIVE_TYPE(2,133,$,$,#503,4,#506,-36);
#503= TEXT(22,5,$,$,'STRING','*STRING',#504);
#504= TEXT_LAYOUT(81.666667,27.,124.,34.,#505);
#505= TEXT_TYPE(1,6);
#506= TYPE_LAYOUT(#507);
#507= RECTANGLE(573.33333,120.,163.33333,54.);
#508= OBJECT_LINE_LAYOUT(#509,#510);
#509= TEXT_PLACEMENT(1,1);
#510= WORLD_PLINE(#511,1,$,(-300.85511,252.66667,-47.811556),-1.,0.);
#511= WORLD_POINT(402.33333,522.66667);
#514= WHERE_RULE('WR1','node_1 <> node_2',$);
#515= TYPE_LAYOUT(#516);
#516= RECTANGLE(242.66667,522.66667,570.,225.33333);
#517= COMMENT(0,33,$,$,#518,$);
#518= TEXT(22,33,$,$,'Both child nodes shall exist for the root note.',$
,$);
#519= TEXT(22,5,$,$,'uuid','uuid',#520);
#520= TEXT_LAYOUT(89.,27.,52.,34.,#521);
#521= TEXT_TYPE(1,6);
#522= TEXT(22,5,$,$,'STRING','STRING',#523);
#523= TEXT_LAYOUT(75.,27.,109.,34.,#524);
#524= TEXT_TYPE(1,6);
#525= TEXT(22,5,$,$,'leaf_hash_function',
'(RT) hash_function > leaf_hash_function ',#526);
#526= TEXT_LAYOUT(23.180222,-58.666667,548.,35.,#527);
#527= TEXT_TYPE(1,66);
#528= TEXT(22,5,$,$,'STRING','STRING',#529);
#529= TEXT_LAYOUT(75.,27.,109.,34.,#530);
#530= TEXT_TYPE(1,6);
#531= TEXT(22,5,$,$,'STRING','STRING',#532);
#532= TEXT_LAYOUT(75.,27.,109.,34.,#533);
#533= TEXT_TYPE(1,6);
#534= TEXT(22,5,$,$,'internal_hash_function',
'(RT) hash_function > internal_hash_function ',#535);
#535= TEXT_LAYOUT(-309.33333,-21.121778,599.,35.,#536);
#536= TEXT_TYPE(1,66);
#537= TEXT(22,5,$,$,'internal_hash_function',
'(RT) hash_function > internal_hash_function ',#538);
#538= TEXT_LAYOUT(-6.,93.,599.,35.,#539);
#539= TEXT_TYPE(1,66);
#540= TEXT(22,5,$,$,'STRING','*STRING',#541);
#541= TEXT_LAYOUT(180.33333,27.,124.,34.,#542);
#542= TEXT_TYPE(1,6);
#543= TEXT(22,5,$,$,'internal_operand','(DER) internal_operand ',#544);
#544= TEXT_LAYOUT(8.6666667,63.818667,324.,35.,#545);
#545= TEXT_TYPE(1,66);
#546= TEXT(22,5,$,$,'ATTRIBUTE_2','ATTRIBUTE_2 ',#547);
#547= TEXT_LAYOUT(0.,0.,207.,35.,#548);
#548= TEXT_TYPE(1,66);
#549= TEXT(22,5,$,$,'ATTRIBUTE_3','ATTRIBUTE_3 ',#550);
#550= TEXT_LAYOUT(-45.333333,253.51467,207.,35.,#551);
#551= TEXT_TYPE(1,66);
#552= TEXT(22,5,$,$,'ATTRIBUTE_1','ATTRIBUTE_1 ',#553);
#553= TEXT_LAYOUT(55.,50.333333,207.,35.,#554);
#554= TEXT_TYPE(1,66);
#555= COMMENT(0,69,$,$,#556,#559);
#556= TEXT(22,5,$,$,
'INVERSE attribute on uuid_tree_node.node_2 omitted from diagram',
'INVERSE attribute on \X\0D\X\0Auuid_tree_node.node_2 \X\0D\X\0Aomitted from diagram'
,#557);
#557= TEXT_LAYOUT(10.,10.,381.,138.,#558);
#558= TEXT_TYPE(1,40);
#559= TYPE_LAYOUT(#560);
#560= RECTANGLE(298.66667,1277.3333,405.,156.);
ENDSEC;

END-ISO-10303-21;
